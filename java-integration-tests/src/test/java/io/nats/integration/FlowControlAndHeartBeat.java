/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.nats.integration;

import io.nats.client.JetStreamSubscription;
import io.nats.client.Message;
import io.nats.client.PushSubscribeOptions;
import io.nats.client.api.ConsumerConfiguration;
import io.nats.client.impl.NatsMessage;
import io.nats.integration.utils.JetStreamTestBase;
import io.nats.integration.utils.JetStreamTestHelper;
import org.junit.jupiter.api.Test;

import java.time.Duration;

import static org.junit.jupiter.api.Assertions.assertTrue;

class FlowControlAndHeartBeat extends JetStreamTestBase {

    //    @ParameterizedTest
//    @ValueSource(strings = {"500,1024", "1,500000"})
    // TODO MAKE THIS WORK.
    public void testFlowControl(String pendingLimits) throws Exception {
        runInJsServer(nc -> {
            JetStreamTestHelper h = createTestMemoryStream(nc);

            ConsumerConfiguration cc = ConsumerConfiguration.builder()
                    .flowControl(true)
                    .idleHeartbeat(Duration.ofMillis(250))
                    .build();
            PushSubscribeOptions pso = PushSubscribeOptions.builder().configuration(cc).build();

            // This is configured so the subscriber ends up being considered slow
            JetStreamSubscription sub = h.js.subscribe(h.subject, pso);
            nc.flush(Duration.ofSeconds(5));
            String[] split = pendingLimits.split(",");
            sub.setPendingLimits(Integer.parseInt(split[0]), Integer.parseInt(split[1]));

            // publish more message data than the subscriber will handle
            byte[] data = new byte[1024];
            for (int x = 1; x <= 100; x++) {
                Message msg = NatsMessage.builder()
                        .subject(h.subject)
                        .data(data)
                        .build();
                h.js.publish(msg);
            }

            // sleep to let the messages back up
            sleep(1500);

            int count = 0;
            long now = System.currentTimeMillis();
            long elapsed = System.currentTimeMillis() - now;
            while (elapsed < 3000 && count < 1) {
                Message m = sub.nextMessage(Duration.ofMillis(100));
                if (m != null && m.isStatusMessage() && m.getStatus().isFlowControl()) {
                    count++;
                }
                elapsed = System.currentTimeMillis() - now;
            }
            assertTrue(count > 0);
        });
    }

    @Test
    public void testHeartbeat() throws Exception {
        runInJsServer(nc -> {
            JetStreamTestHelper h = createTestMemoryStream(nc);

            ConsumerConfiguration cc = ConsumerConfiguration.builder()
                    .idleHeartbeat(Duration.ofMillis(250))
                    .build();
            PushSubscribeOptions pso = PushSubscribeOptions.builder().configuration(cc).build();

            JetStreamSubscription sub = h.js.subscribe(h.subject, pso);
            nc.flush(Duration.ofSeconds(1)); // flush outgoing communication with/to the server

            int count = 0;
            long now = System.currentTimeMillis();
            long elapsed = System.currentTimeMillis() - now;
            while (elapsed < 3000) {
                Message m = sub.nextMessage(Duration.ofMillis(100));
                if (m != null && m.isStatusMessage() && m.getStatus().isHeartbeat()) {
                    count++;
                }
                elapsed = System.currentTimeMillis() - now;
            }
            assertTrue(count > 8);
        });
    }
}
