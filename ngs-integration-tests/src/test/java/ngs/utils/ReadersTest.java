/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ngs.utils;

import ngs.Import;
import ngs.Nats;
import ngs.NatsClaims;
import ngs.OperatorLimitsV2;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class ReadersTest {

    @Test
    public void testJsonReader() throws Exception {
        NatsClaims claim = JsonReader.getNatsClaimsFromFile("src\\test\\resources\\A.json");
        assertNatsClaims(claim, true);
    }

    @Test
    public void testJwtReader() throws Exception {
        NatsClaims claim = JwtReader.getNatsClaimsFromFile("src\\test\\resources\\A.jwt");
        assertNatsClaims(claim, false);
    }

    private void assertNatsClaims(NatsClaims claim, boolean extended) {
        assertEquals(1650041223, claim.getIat());
        assertEquals("ODSKBNDIT3LTZWFSRAWOBXSBZ7VZCDQVU6TBJX3TQGYXUWRU46ANJJS4", claim.getIss());
        assertEquals("IUJYSKQHYIHW5MLLDKZBVLGA3O27LHYMN5BMC72XEPADVH2V5BHA", claim.getJti());
        assertEquals("A", claim.getName());
        assertEquals("ACUCEFPEVLYC2B3KD6FBDMY2COVHAYLBU27YGQ7YH5PFKAONDN5SIFVN", claim.getSub());
        Nats nats = claim.getNats();
        List<Import> imports = nats.getImports();
        assertEquals(3, imports.size());
        OperatorLimitsV2 limits = nats.getLimits();
        assertEquals(10, limits.getConn());
        assertEquals(1000000000, limits.getData());
        assertEquals(-1, limits.getExports());
        assertEquals(-1, limits.getImports());
        assertEquals(1000, limits.getPayload());
        assertEquals(10, limits.getSubs());

        if (extended) {
            assertTrue(limits.areWildcardsAllowed());
            assertEquals(42, limits.getLeafNodeConn());
            assertEquals(101, limits.getMemoryStorage());
            assertEquals(102, limits.getDiskStorage());
            assertEquals(103, limits.getStreams());
            assertEquals(104, limits.getConsumer());
            assertEquals(105, limits.getMaxAckPending());
            assertEquals(106, limits.getMemoryMaxStreamBytes());
            assertEquals(107, limits.getDiskMaxStreamBytes());
            assertTrue(limits.isMaxBytesRequired());
        }
    }
}